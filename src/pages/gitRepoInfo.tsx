import { useState } from 'react';
import Head from "next/head";
import { type NextPage } from "next";
import { Octokit } from '@octokit/core';

const GitRepoInfo: NextPage = () => {
  const [repoOwner, setRepoOwner] = useState('');
  const [repoName, setRepoName] = useState('');
  const [contributors, setContributors] = useState<any[]>([]);
  const [topContributors, setTopContributors] = useState<any[]>([]);
  const [linesAdded, setLinesAdded] = useState(0);
  const [linesDeleted, setLinesDeleted] = useState(0);

  const fetchRepoInfo = async () => {

    const octokit = new Octokit({
      auth: process.env.GITHUB_ACCESS_TOKEN,
    })
    // contributors
    try {
      const response = await octokit.request(`GET /repos/${repoOwner}/${repoName}/contributors`, {
        owner: `${repoOwner}`,
        repo: `${repoName}`,
        headers: {
          'X-GitHub-Api-Version': '2022-11-28'
        }
      })
      console.log(process.env.GITHUB_ACCESS_TOKEN)
      if (response.status === 200) {
        const data = response.data;
        console.log(data)
        setContributors(data);
        // Set the top 10 contributors based on the number of contributions
        setTopContributors(data.slice(0, 10));
      } else {
        // Handle non-200 status code
        console.error('API request failed with status:', response.status);
      }

    } catch (error) {
      console.error(error);
    }
   // commits
   setLinesAdded(0)
   setLinesDeleted(0)
    try {
      const response = await octokit.request(`GET /repos/${repoOwner}/${repoName}/commits`, {
        owner: `${repoOwner}`,
        repo: `${repoName}`,
        headers: {
          'X-GitHub-Api-Version': '2022-11-28'
        }
      })

      if (response.status === 200) {
        const commits = response.data;

        for (const commit of commits) {
          const commitResponse = await octokit.request(`GET /repos/${repoOwner}/${repoName}/commits/${commit.sha}`, {
              owner: 'OWNER',
              repo: 'REPO',
              ref: 'REF',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
          const filesChanged = commitResponse.data.stats;
          setLinesAdded((prev)=>prev+filesChanged.additions);
          setLinesDeleted((prev)=>prev+filesChanged.deletions);
        }
      } else {
        // Handle non-200 status code
        console.error('API request failed with status:', response.status);
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
          <title>Soundscape for Everyone</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/Soundscape_Logo.svg" />
      </Head>
      <main>
        <div className='px-10 py-10'>
          <div className="flex space-x-4">
              <input
                className="text-xs w-96 border border-gray-300 px-4 py-2 rounded-md shadow-sm focus:outline-none focus:border-blue-500"
                type="text"
                value={repoOwner}
                onChange={(e) => setRepoOwner(e.target.value)}
                placeholder="Enter repository owner"
              />
              <input
                className="text-xs w-96 border border-gray-300 px-4 py-2 rounded-md shadow-sm focus:outline-none focus:border-blue-500"
                type="text"
                value={repoName}
                onChange={(e) => setRepoName(e.target.value)}
                placeholder="Enter repository name"
              />
              <button
                className="px-6 py-3 rounded-md bg-gradient-to-r from-blue-500 to-indigo-500 text-black font-semibold shadow-md hover:shadow-lg focus:outline-none focus:ring focus:ring-blue-200"
                onClick={fetchRepoInfo}
              >
                Get Repo Info
              </button>
          </div>

          {/* Display the contributors and top 10 contributors here */}
          <div>
            <h2>Unique Contributors: {contributors.length}</h2>
            <h2>Lines Added: {linesAdded}</h2>
            <h2>Lines Deleted: {linesDeleted}</h2>
            <h2>Top 10 Contributors:</h2>
            <ol className="list-decimal pl-4">
              {topContributors.map((contributor) => (
                <li key={contributor.login}>{contributor.login}</li>
              ))}
            </ol>
          </div>
        </div>
      </main>

    </>

  );
};

export default GitRepoInfo;
